{"ast":null,"code":"import Axios from 'axios';\nimport Cookie from 'js-cookie';\nimport { USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS } from '../constants/userConstants';\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/signin\", {\n      email,\n      password\n    });\n    console.log('user response', data);\n    localStorage.set(\"authToken\", \"Barer \" + data.token);\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password, repassword) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password,\n      repassword\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password,\n      repassword\n    });\n    console.log('user response', data);\n    localStorage.set(\"authToken\", \"Barer \" + data.token);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { signin, register };","map":{"version":3,"sources":["D:/P-300/raisan/frontend/src/actions/userAction.js"],"names":["Axios","Cookie","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_SIGNIN_FAIL","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","signin","email","password","dispatch","type","payload","data","post","console","log","localStorage","set","token","JSON","stringify","error","message","register","name","repassword"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,EAAoDC,qBAApD,EAA2EC,gBAA3E,EAA6FC,mBAA7F,EAAkHC,mBAAlH,QAA6I,4BAA7I;;AAGA,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AACtDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEN,mBAAR;AAA6BO,IAAAA,OAAO,EAAE;AAAEJ,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAtC,GAAD,CAAR;;AACA,MAAI;AACF,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAMd,KAAK,CAACe,IAAN,CAAW,mBAAX,EAAgC;AAAEN,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAhC,CAAvB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,IAA7B;AACAI,IAAAA,YAAY,CAACC,GAAb,CAAiB,WAAjB,EAA8B,WAAWL,IAAI,CAACM,KAA9C;AACAT,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,mBAAR;AAA6BM,MAAAA,OAAO,EAAEC;AAAtC,KAAD,CAAR;AACAb,IAAAA,MAAM,CAACkB,GAAP,CAAW,UAAX,EAAuBE,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAvB;AACD,GAND,CAME,OAAOS,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,gBAAR;AAA0BQ,MAAAA,OAAO,EAAEU,KAAK,CAACC;AAAzC,KAAD,CAAR;AACD;AACF,CAXD;;AAYA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOjB,KAAP,EAAcC,QAAd,EAAwBiB,UAAxB,KAAuC,MAAOhB,QAAP,IAAoB;AAC1EA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAET,qBAAR;AAA+BU,IAAAA,OAAO,EAAE;AAAEa,MAAAA,IAAF;AAAQjB,MAAAA,KAAR;AAAeC,MAAAA,QAAf;AAAyBiB,MAAAA;AAAzB;AAAxC,GAAD,CAAR;;AACA,MAAI;AACF,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMd,KAAK,CAACe,IAAN,CAAW,qBAAX,EAAkC;AAAEW,MAAAA,IAAF;AAAQjB,MAAAA,KAAR;AAAeC,MAAAA,QAAf;AAAyBiB,MAAAA;AAAzB,KAAlC,CAAvB;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,IAA7B;AACAI,IAAAA,YAAY,CAACC,GAAb,CAAiB,WAAjB,EAA8B,WAAWL,IAAI,CAACM,KAA9C;AACAT,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,qBAAR;AAA+BS,MAAAA,OAAO,EAAEC;AAAxC,KAAD,CAAR;AACAb,IAAAA,MAAM,CAACkB,GAAP,CAAW,UAAX,EAAuBE,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAvB;AACD,GAND,CAME,OAAOS,KAAP,EAAc;AACdZ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEV,kBAAR;AAA4BW,MAAAA,OAAO,EAAEU,KAAK,CAACC;AAA3C,KAAD,CAAR;AACD;AACF,CAXD;;AAYA,SAAShB,MAAT,EAAiBiB,QAAjB","sourcesContent":["import Axios from 'axios';\r\nimport Cookie from 'js-cookie';\r\nimport { USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS } from '../constants/userConstants';\r\n\r\n\r\nconst signin = (email, password) => async (dispatch) => {\r\n  dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\r\n  try {\r\n    const { data } = await Axios.post(\"/api/users/signin\", { email, password });\r\n    console.log('user response', data)\r\n    localStorage.set(\"authToken\", \"Barer \" + data.token)\r\n    dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\r\n    Cookie.set('userInfo', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\r\n  }\r\n}\r\nconst register = (name, email, password, repassword) => async (dispatch) => {\r\n  dispatch({ type: USER_REGISTER_REQUEST, payload: { name, email, password, repassword } });\r\n  try {\r\n    const { data } = await Axios.post(\"/api/users/register\", { name, email, password, repassword });\r\n    console.log('user response', data)\r\n    localStorage.set(\"authToken\", \"Barer \" + data.token)\r\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n    Cookie.set('userInfo', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\r\n  }\r\n}\r\nexport { signin, register };"]},"metadata":{},"sourceType":"module"}